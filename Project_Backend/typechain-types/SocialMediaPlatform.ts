/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SocialMediaPlatform {
  export type ChatStruct = {
    participant1: AddressLike;
    participant2: AddressLike;
    lastActivity: BigNumberish;
  };

  export type ChatStructOutput = [
    participant1: string,
    participant2: string,
    lastActivity: bigint
  ] & { participant1: string; participant2: string; lastActivity: bigint };

  export type MessageStruct = {
    sender: AddressLike;
    content: string;
    timestamp: BigNumberish;
    read: boolean;
  };

  export type MessageStructOutput = [
    sender: string,
    content: string,
    timestamp: bigint,
    read: boolean
  ] & { sender: string; content: string; timestamp: bigint; read: boolean };

  export type PostStruct = {
    author: AddressLike;
    content: string;
    ipfsHash: string;
    timestamp: BigNumberish;
    likeCount: BigNumberish;
    commentCount: BigNumberish;
    shareCount: BigNumberish;
  };

  export type PostStructOutput = [
    author: string,
    content: string,
    ipfsHash: string,
    timestamp: bigint,
    likeCount: bigint,
    commentCount: bigint,
    shareCount: bigint
  ] & {
    author: string;
    content: string;
    ipfsHash: string;
    timestamp: bigint;
    likeCount: bigint;
    commentCount: bigint;
    shareCount: bigint;
  };

  export type CommentStruct = {
    commenter: AddressLike;
    commentText: string;
    timestamp: BigNumberish;
  };

  export type CommentStructOutput = [
    commenter: string,
    commentText: string,
    timestamp: bigint
  ] & { commenter: string; commentText: string; timestamp: bigint };
}

export interface SocialMediaPlatformInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "COMMENT_COOLDOWN"
      | "MAX_COMMENT_LENGTH"
      | "MAX_CONTENT_LENGTH"
      | "MAX_USERNAME_LENGTH"
      | "MESSAGE_COOLDOWN"
      | "POST_COOLDOWN"
      | "addComment"
      | "createChat"
      | "createPost"
      | "followUser"
      | "getChat"
      | "getChatMessages"
      | "getChatWithUser"
      | "getFollowers"
      | "getFollowing"
      | "getPost"
      | "getPostComments"
      | "getPostLikes"
      | "getTotalPosts"
      | "getUserChats"
      | "getUserPosts"
      | "likePost"
      | "posts"
      | "registerUser"
      | "sendMessage"
      | "sharePost"
      | "unfollowUser"
      | "unlikePost"
      | "updateProfile"
      | "users"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChatCreated"
      | "CommentAdded"
      | "MessageSent"
      | "PostCreated"
      | "PostLiked"
      | "PostShared"
      | "UserFollowed"
      | "UserProfileUpdated"
      | "UserRegistered"
      | "UserUnfollowed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "COMMENT_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_COMMENT_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CONTENT_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_USERNAME_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MESSAGE_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POST_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addComment",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createChat",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createPost",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "followUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChat",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChatMessages",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChatWithUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFollowers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFollowing",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPostComments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPostLikes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPosts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserChats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPosts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "likePost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "posts", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sharePost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unfollowUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlikePost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProfile",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [AddressLike]): string;

  decodeFunctionResult(
    functionFragment: "COMMENT_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_COMMENT_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CONTENT_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_USERNAME_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MESSAGE_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POST_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addComment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createChat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "followUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getChat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChatMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChatWithUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFollowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFollowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPostComments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPostLikes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserChats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "likePost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "posts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sharePost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unfollowUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlikePost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
}

export namespace ChatCreatedEvent {
  export type InputTuple = [
    chatId: BigNumberish,
    participant1: AddressLike,
    participant2: AddressLike
  ];
  export type OutputTuple = [
    chatId: bigint,
    participant1: string,
    participant2: string
  ];
  export interface OutputObject {
    chatId: bigint;
    participant1: string;
    participant2: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommentAddedEvent {
  export type InputTuple = [
    postId: BigNumberish,
    commenter: AddressLike,
    commentText: string
  ];
  export type OutputTuple = [
    postId: bigint,
    commenter: string,
    commentText: string
  ];
  export interface OutputObject {
    postId: bigint;
    commenter: string;
    commentText: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageSentEvent {
  export type InputTuple = [
    chatId: BigNumberish,
    sender: AddressLike,
    content: string
  ];
  export type OutputTuple = [chatId: bigint, sender: string, content: string];
  export interface OutputObject {
    chatId: bigint;
    sender: string;
    content: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PostCreatedEvent {
  export type InputTuple = [
    postId: BigNumberish,
    author: AddressLike,
    content: string,
    ipfsHash: string
  ];
  export type OutputTuple = [
    postId: bigint,
    author: string,
    content: string,
    ipfsHash: string
  ];
  export interface OutputObject {
    postId: bigint;
    author: string;
    content: string;
    ipfsHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PostLikedEvent {
  export type InputTuple = [postId: BigNumberish, liker: AddressLike];
  export type OutputTuple = [postId: bigint, liker: string];
  export interface OutputObject {
    postId: bigint;
    liker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PostSharedEvent {
  export type InputTuple = [postId: BigNumberish, sharer: AddressLike];
  export type OutputTuple = [postId: bigint, sharer: string];
  export interface OutputObject {
    postId: bigint;
    sharer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserFollowedEvent {
  export type InputTuple = [follower: AddressLike, followed: AddressLike];
  export type OutputTuple = [follower: string, followed: string];
  export interface OutputObject {
    follower: string;
    followed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserProfileUpdatedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRegisteredEvent {
  export type InputTuple = [user: AddressLike, username: string];
  export type OutputTuple = [user: string, username: string];
  export interface OutputObject {
    user: string;
    username: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserUnfollowedEvent {
  export type InputTuple = [follower: AddressLike, unfollowed: AddressLike];
  export type OutputTuple = [follower: string, unfollowed: string];
  export interface OutputObject {
    follower: string;
    unfollowed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SocialMediaPlatform extends BaseContract {
  connect(runner?: ContractRunner | null): SocialMediaPlatform;
  waitForDeployment(): Promise<this>;

  interface: SocialMediaPlatformInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COMMENT_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  MAX_COMMENT_LENGTH: TypedContractMethod<[], [bigint], "view">;

  MAX_CONTENT_LENGTH: TypedContractMethod<[], [bigint], "view">;

  MAX_USERNAME_LENGTH: TypedContractMethod<[], [bigint], "view">;

  MESSAGE_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  POST_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  addComment: TypedContractMethod<
    [postId: BigNumberish, commentText: string],
    [void],
    "nonpayable"
  >;

  createChat: TypedContractMethod<
    [participant: AddressLike],
    [void],
    "nonpayable"
  >;

  createPost: TypedContractMethod<
    [content: string, ipfsHash: string],
    [void],
    "nonpayable"
  >;

  followUser: TypedContractMethod<
    [userToFollow: AddressLike],
    [void],
    "nonpayable"
  >;

  getChat: TypedContractMethod<
    [chatId: BigNumberish],
    [SocialMediaPlatform.ChatStructOutput],
    "view"
  >;

  getChatMessages: TypedContractMethod<
    [chatId: BigNumberish, limit: BigNumberish, offset: BigNumberish],
    [SocialMediaPlatform.MessageStructOutput[]],
    "view"
  >;

  getChatWithUser: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getFollowers: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  getFollowing: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  getPost: TypedContractMethod<
    [postId: BigNumberish],
    [SocialMediaPlatform.PostStructOutput],
    "view"
  >;

  getPostComments: TypedContractMethod<
    [postId: BigNumberish],
    [SocialMediaPlatform.CommentStructOutput[]],
    "view"
  >;

  getPostLikes: TypedContractMethod<[postId: BigNumberish], [string[]], "view">;

  getTotalPosts: TypedContractMethod<[], [bigint], "view">;

  getUserChats: TypedContractMethod<[], [bigint[]], "view">;

  getUserPosts: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  likePost: TypedContractMethod<[postId: BigNumberish], [void], "nonpayable">;

  posts: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, bigint] & {
        author: string;
        content: string;
        ipfsHash: string;
        timestamp: bigint;
        likeCount: bigint;
        commentCount: bigint;
        shareCount: bigint;
      }
    ],
    "view"
  >;

  registerUser: TypedContractMethod<[username: string], [void], "nonpayable">;

  sendMessage: TypedContractMethod<
    [chatId: BigNumberish, content: string],
    [void],
    "nonpayable"
  >;

  sharePost: TypedContractMethod<[postId: BigNumberish], [void], "nonpayable">;

  unfollowUser: TypedContractMethod<
    [userToUnfollow: AddressLike],
    [void],
    "nonpayable"
  >;

  unlikePost: TypedContractMethod<[postId: BigNumberish], [void], "nonpayable">;

  updateProfile: TypedContractMethod<
    [profilePictureHash: string],
    [void],
    "nonpayable"
  >;

  users: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, bigint] & {
        username: string;
        profilePictureHash: string;
        isRegistered: boolean;
        registrationDate: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COMMENT_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_COMMENT_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_CONTENT_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_USERNAME_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MESSAGE_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "POST_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addComment"
  ): TypedContractMethod<
    [postId: BigNumberish, commentText: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createChat"
  ): TypedContractMethod<[participant: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createPost"
  ): TypedContractMethod<
    [content: string, ipfsHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "followUser"
  ): TypedContractMethod<[userToFollow: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getChat"
  ): TypedContractMethod<
    [chatId: BigNumberish],
    [SocialMediaPlatform.ChatStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getChatMessages"
  ): TypedContractMethod<
    [chatId: BigNumberish, limit: BigNumberish, offset: BigNumberish],
    [SocialMediaPlatform.MessageStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getChatWithUser"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFollowers"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getFollowing"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPost"
  ): TypedContractMethod<
    [postId: BigNumberish],
    [SocialMediaPlatform.PostStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPostComments"
  ): TypedContractMethod<
    [postId: BigNumberish],
    [SocialMediaPlatform.CommentStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPostLikes"
  ): TypedContractMethod<[postId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTotalPosts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserChats"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserPosts"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "likePost"
  ): TypedContractMethod<[postId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "posts"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, bigint] & {
        author: string;
        content: string;
        ipfsHash: string;
        timestamp: bigint;
        likeCount: bigint;
        commentCount: bigint;
        shareCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<[username: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<
    [chatId: BigNumberish, content: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sharePost"
  ): TypedContractMethod<[postId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unfollowUser"
  ): TypedContractMethod<[userToUnfollow: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlikePost"
  ): TypedContractMethod<[postId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProfile"
  ): TypedContractMethod<[profilePictureHash: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, bigint] & {
        username: string;
        profilePictureHash: string;
        isRegistered: boolean;
        registrationDate: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ChatCreated"
  ): TypedContractEvent<
    ChatCreatedEvent.InputTuple,
    ChatCreatedEvent.OutputTuple,
    ChatCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CommentAdded"
  ): TypedContractEvent<
    CommentAddedEvent.InputTuple,
    CommentAddedEvent.OutputTuple,
    CommentAddedEvent.OutputObject
  >;
  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;
  getEvent(
    key: "PostCreated"
  ): TypedContractEvent<
    PostCreatedEvent.InputTuple,
    PostCreatedEvent.OutputTuple,
    PostCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PostLiked"
  ): TypedContractEvent<
    PostLikedEvent.InputTuple,
    PostLikedEvent.OutputTuple,
    PostLikedEvent.OutputObject
  >;
  getEvent(
    key: "PostShared"
  ): TypedContractEvent<
    PostSharedEvent.InputTuple,
    PostSharedEvent.OutputTuple,
    PostSharedEvent.OutputObject
  >;
  getEvent(
    key: "UserFollowed"
  ): TypedContractEvent<
    UserFollowedEvent.InputTuple,
    UserFollowedEvent.OutputTuple,
    UserFollowedEvent.OutputObject
  >;
  getEvent(
    key: "UserProfileUpdated"
  ): TypedContractEvent<
    UserProfileUpdatedEvent.InputTuple,
    UserProfileUpdatedEvent.OutputTuple,
    UserProfileUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserRegistered"
  ): TypedContractEvent<
    UserRegisteredEvent.InputTuple,
    UserRegisteredEvent.OutputTuple,
    UserRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "UserUnfollowed"
  ): TypedContractEvent<
    UserUnfollowedEvent.InputTuple,
    UserUnfollowedEvent.OutputTuple,
    UserUnfollowedEvent.OutputObject
  >;

  filters: {
    "ChatCreated(uint256,address,address)": TypedContractEvent<
      ChatCreatedEvent.InputTuple,
      ChatCreatedEvent.OutputTuple,
      ChatCreatedEvent.OutputObject
    >;
    ChatCreated: TypedContractEvent<
      ChatCreatedEvent.InputTuple,
      ChatCreatedEvent.OutputTuple,
      ChatCreatedEvent.OutputObject
    >;

    "CommentAdded(uint256,address,string)": TypedContractEvent<
      CommentAddedEvent.InputTuple,
      CommentAddedEvent.OutputTuple,
      CommentAddedEvent.OutputObject
    >;
    CommentAdded: TypedContractEvent<
      CommentAddedEvent.InputTuple,
      CommentAddedEvent.OutputTuple,
      CommentAddedEvent.OutputObject
    >;

    "MessageSent(uint256,address,string)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;

    "PostCreated(uint256,address,string,string)": TypedContractEvent<
      PostCreatedEvent.InputTuple,
      PostCreatedEvent.OutputTuple,
      PostCreatedEvent.OutputObject
    >;
    PostCreated: TypedContractEvent<
      PostCreatedEvent.InputTuple,
      PostCreatedEvent.OutputTuple,
      PostCreatedEvent.OutputObject
    >;

    "PostLiked(uint256,address)": TypedContractEvent<
      PostLikedEvent.InputTuple,
      PostLikedEvent.OutputTuple,
      PostLikedEvent.OutputObject
    >;
    PostLiked: TypedContractEvent<
      PostLikedEvent.InputTuple,
      PostLikedEvent.OutputTuple,
      PostLikedEvent.OutputObject
    >;

    "PostShared(uint256,address)": TypedContractEvent<
      PostSharedEvent.InputTuple,
      PostSharedEvent.OutputTuple,
      PostSharedEvent.OutputObject
    >;
    PostShared: TypedContractEvent<
      PostSharedEvent.InputTuple,
      PostSharedEvent.OutputTuple,
      PostSharedEvent.OutputObject
    >;

    "UserFollowed(address,address)": TypedContractEvent<
      UserFollowedEvent.InputTuple,
      UserFollowedEvent.OutputTuple,
      UserFollowedEvent.OutputObject
    >;
    UserFollowed: TypedContractEvent<
      UserFollowedEvent.InputTuple,
      UserFollowedEvent.OutputTuple,
      UserFollowedEvent.OutputObject
    >;

    "UserProfileUpdated(address)": TypedContractEvent<
      UserProfileUpdatedEvent.InputTuple,
      UserProfileUpdatedEvent.OutputTuple,
      UserProfileUpdatedEvent.OutputObject
    >;
    UserProfileUpdated: TypedContractEvent<
      UserProfileUpdatedEvent.InputTuple,
      UserProfileUpdatedEvent.OutputTuple,
      UserProfileUpdatedEvent.OutputObject
    >;

    "UserRegistered(address,string)": TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;
    UserRegistered: TypedContractEvent<
      UserRegisteredEvent.InputTuple,
      UserRegisteredEvent.OutputTuple,
      UserRegisteredEvent.OutputObject
    >;

    "UserUnfollowed(address,address)": TypedContractEvent<
      UserUnfollowedEvent.InputTuple,
      UserUnfollowedEvent.OutputTuple,
      UserUnfollowedEvent.OutputObject
    >;
    UserUnfollowed: TypedContractEvent<
      UserUnfollowedEvent.InputTuple,
      UserUnfollowedEvent.OutputTuple,
      UserUnfollowedEvent.OutputObject
    >;
  };
}
